"use strict";

var _ = require('lodash');
var fs = require('fs');
var expect = require('chai').expect;
var connect = require('camo').connect;
var Document = require('camo').Document;
var isDocument = require('camo').isDocument;
// var ValidationError = require('camo').ValidationError;
var Data = require('./data');
var getData1 = require('./util').data1;
var getData2 = require('./util').data2;
var validateId = require('./util').validateId;
var fail = require('./util').fail;
var expectError = require('./util').expectError;
var path = require('path');

var up = require('./user-profile');

describe('Document', function() {

    // TODO: Should probably use mock database client...
    var url = "nedb://" + __dirname +  "/nedbdata/data";
    //var url = 'mongodb://localhost/camo_test';
    var database = null;

    before(function(done) {
        connect(url).then(function(db) {
            database = db;
           // return database.dropDatabase();
        //    return done();
        }).then(function() {
            return done();
        });
    });

    beforeEach(function(done) {
        done();
    });

    afterEach(function(done) {
         database.dropDatabase().then(function() {}).then(done, done);
        
    });

    after(function(done) {
         database.dropDatabase().then(function() {}).then(done, done);
        
    });

    describe('USER DATA', function() {
        it('should accept value specified in choices', function(done) {

            var data = up.create();
            data.email = 'jano@jano.sk';
            data.type = 'admin';
            data.atType = 'local';
            
            data.save().then(function() {
                validateId(data);
                expect(data.email).to.be.equal('jano@jano.sk');
                expect(data.type).to.be.equal('admin');
                expect(data.atType).to.be.equal('local');
            }).then(done, done);
        });
    });
    
    describe('min', function() {
        it('should accept value > min', function(done) {

            var data = Data.create();
            data.item = 1;

            data.save().then(function() {
                validateId(data);
                expect(data.item).to.be.equal(1);
            }).then(done, done);
        });

        it('should accept value == min', function(done) {

            var data = Data.create();
            data.item = 0;

            data.save().then(function() {
                validateId(data);
                expect(data.item).to.be.equal(0);
            }).then(done, done);
        });
    });

    describe('max', function() {
        it('should accept value < max', function(done) {

            var data = Data.create();
            data.item = 99;

            data.save().then(function() {
                validateId(data);
                expect(data.item).to.be.equal(99);
            }).then(done, done);
        });

        it('should accept value == max', function(done) {

            var data = Data.create();
            data.item = 100;

            data.save().then(function() {
                validateId(data);
                expect(data.item).to.be.equal(100);
            }).then(done, done);
        });

       
    });

    describe('match', function() {
        it('should accept value matching regex', function(done) {

            class Product extends Document {
                constructor() {
                    super();
                    this.name = String;
                    this.cost = {
                        type: String,
                        match: /^\$?[\d,]+(\.\d*)?$/
                    };
                }
            }

            var product = Product.create();
            product.name = 'Dark Roast Coffee';
            product.cost = '$1.39';

            product.save().then(function() {
                validateId(product);
                expect(product.name).to.be.equal('Dark Roast Coffee');
                expect(product.cost).to.be.equal('$1.39');
            }).then(done, done);
        });

        it('should reject value not matching regex', function(done) {

            class Product extends Document {
                constructor() {
                    super();
                    this.name = String;
                    this.cost = {
                        type: String,
                        match: /^\$?[\d,]+(\.\d*)?$/
                    };
                }
            }

            var product = Product.create();
            product.name = 'Light Roast Coffee';
            product.cost = '$1..39';

            product.save().then(function() {
                fail(null, Error, 'Expected error, but got none.');
            }).catch(function(error) {
                expectError(error);
            }).then(done, done);
        });
    });

    describe('validate', function() {
        it('should accept value that passes custom validator', function(done) {

            class Person extends Document {
                constructor() {
                    super();

                    this.name = {
                        type: String,
                        validate: function(value) {
                            return value.length > 4;
                        }
                    };
                }

                static collectionName() {
                    return 'people';
                }
            }

            var person = Person.create({
                name: 'Scott'
            });

            person.save().then(function() {
                validateId(person);
                expect(person.name).to.be.equal('Scott');
            }).then(done, done);
        });

        it('should reject value that fails custom validator', function(done) {

            class Person extends Document {
                constructor() {
                    super();

                    this.name = {
                        type: String,
                        validate: function(value) {
                            return value.length > 4;
                        }
                    };
                }

                static collectionName() {
                    return 'people';
                }
            }

            var person = Person.create({
                name: 'Matt'
            });

            person.save().then(function() {
                fail(null, Error, 'Expected error, but got none.');
            }).catch(function(error) {
                expectError(error);
            }).then(done, done);
        });
    });

    describe('canonicalize', function() {
        it('should ensure timestamp dates are converted to Date objects', function(done) {

            class Person extends Document {
                constructor() {
                    super();

                    this.birthday = Date;
                }

                static collectionName() {
                    return 'people';
                }
            }

            var now = new Date();

            var person = Person.create({
                birthday: now
            });

            person.save().then(function() {
                validateId(person);
                expect(person.birthday.getFullYear()).to.be.equal(now.getFullYear());
                expect(person.birthday.getHours()).to.be.equal(now.getHours());
                expect(person.birthday.getMinutes()).to.be.equal(now.getMinutes());
                expect(person.birthday.getMonth()).to.be.equal(now.getMonth());
                expect(person.birthday.getSeconds()).to.be.equal(now.getSeconds());
            }).then(done, done);
        });
    });

    describe('required', function() {
        it('should accept empty value that is not reqired', function(done) {

            class Person extends Document {
                constructor() {
                    super();

                    this.name = {
                        type: String,
                        required: false
                    };
                }

                static collectionName() {
                    return 'people';
                }
            }

            var person = Person.create({
                name: ''
            });

            person.save().then(function() {
                validateId(person);
                expect(person.name).to.be.equal('');
            }).then(done, done);
        });

        it('should accept value that is not undefined', function(done) {

            class Person extends Document {
                constructor() {
                    super();

                    this.name = {
                        type: String,
                        required: true
                    };
                }

                static collectionName() {
                    return 'people';
                }
            }

            var person = Person.create({
                name: 'Scott'
            });

            person.save().then(function() {
                validateId(person);
                expect(person.name).to.be.equal('Scott');
            }).then(done, done);
        });

        it('should accept an empty value if default is specified', function(done) {

            class Person extends Document {
                constructor() {
                    super();

                    this.name = {
                        type: String,
                        required: true,
                        default: 'Scott'
                    };
                }

                static collectionName() {
                    return 'people';
                }
            }

            var person = Person.create();

            person.save().then(function() {
                validateId(person);
                expect(person.name).to.be.equal('Scott');
            }).then(done, done);
        });

        it('should accept boolean value', function(done) {

            class Person extends Document {
                constructor() {
                    super();

                    this.isSingle = {
                        type: Boolean,
                        required: true
                    };
                    this.isMerried = {
                        type: Boolean,
                        required: true
                    };
                }

                static collectionName() {
                    return 'people';
                }
            }

            var person = Person.create({
                isMerried: true,
                isSingle: false
            });

            person.save().then(function() {
                validateId(person);
                expect(person.isMerried).to.be.true;
                expect(person.isSingle).to.be.false;
            }).then(done, done);
        });

        it('should accept date value', function(done) {

            class Person extends Document {
                constructor() {
                    super();

                    this.birthDate = {
                        type: Date,
                        required: true
                    };
                }

                static collectionName() {
                    return 'people';
                }
            }

            var myBirthDate = new Date();

            var person = Person.create({
                birthDate: myBirthDate
            });

            person.save().then(function(savedPerson) {
                validateId(person);
                expect(savedPerson.birthDate).to.equal(myBirthDate);
            }).then(done, done);
        });

        it('should accept any number value', function(done) {

            class Person extends Document {
                constructor() {
                    super();

                    this.age = {
                        type: Number,
                        required: true
                    };
                    this.level = {
                        type: Number,
                        required: true
                    };
                }

                static collectionName() {
                    return 'people';
                }
            }

            var person = Person.create({
                age: 21,
                level: 0
            });

            person.save().then(function(savedPerson) {
                validateId(person);
                expect(savedPerson.age).to.equal(21);
                expect(savedPerson.level).to.equal(0);
            }).then(done, done);
        });

        it('should reject value that is undefined', function(done) {

            class Person extends Document {
                constructor() {
                    super();

                    this.name = {
                        type: String,
                        required: true
                    };
                }

                static collectionName() {
                    return 'people';
                }
            }

            var person = Person.create();

            person.save().then(function() {
                fail(null, Error, 'Expected error, but got none.');
            }).catch(function(error) {
                expectError(error);
            }).then(done, done);
        });

        it('should reject value if specified default empty value', function(done) {

            class Person extends Document {
                constructor() {
                    super();

                    this.name = {
                        type: String,
                        required: true,
                        default: ''
                    };
                }

                static collectionName() {
                    return 'people';
                }
            }

            var person = Person.create();

            person.save().then(function() {
                fail(null, Error, 'Expected error, but got none.');
            }).catch(function(error) {
                expectError(error);
            }).then(done, done);
        });

        it('should reject value that is null', function(done) {

            class Person extends Document {
                constructor() {
                    super();

                    this.name = {
                        type: Object,
                        required: true
                    };
                }

                static collectionName() {
                    return 'people';
                }
            }

            var person = Person.create({
                name: null
            });

            person.save().then(function() {
                fail(null, Error, 'Expected error, but got none.');
            }).catch(function(error) {
                expectError(error);
            }).then(done, done);
        });

        it('should reject value that is an empty array', function(done) {

            class Person extends Document {
                constructor() {
                    super();

                    this.names = {
                        type: Array,
                        required: true
                    };
                }

                static collectionName() {
                    return 'people';
                }
            }

            var person = Person.create({
                names: []
            });

            person.save().then(function() {
                fail(null, Error, 'Expected error, but got none.');
            }).catch(function(error) {
                expectError(error);
            }).then(done, done);
        });

        it('should reject value that is an empty string', function(done) {

            class Person extends Document {
                constructor() {
                    super();

                    this.name = {
                        type: String,
                        required: true
                    };
                }

                static collectionName() {
                    return 'people';
                }
            }

            var person = Person.create({
                name: ''
            });

            person.save().then(function() {
                fail(null, Error, 'Expected error, but got none.');
            }).catch(function(error) {
                expectError(error);
            }).then(done, done);
        });

        it('should reject value that is an empty object', function(done) {

            class Person extends Document {
                constructor() {
                    super();

                    this.names = {
                        type: Object,
                        required: true
                    };
                }

                static collectionName() {
                    return 'people';
                }
            }

            var person = Person.create({
                names: {}
            });

            person.save().then(function() {
                fail(null, Error, 'Expected error, but got none.');
            }).catch(function(error) {
                expectError(error);
            }).then(done, done);
        });
    });

    describe('hooks', function() {
        it('should call all pre and post functions', function(done) {

            var preValidateCalled = false;
            var preSaveCalled = false;
            var preDeleteCalled = false;

            var postValidateCalled = false;
            var postSaveCalled = false;
            var postDeleteCalled = false;

            class Person extends Document {
                constructor() {
                    super();
                }

                static collectionName() {
                    return 'people';
                }

                preValidate() {
                    preValidateCalled = true;
                }

                postValidate() {
                    postValidateCalled = true;
                }

                preSave() {
                    preSaveCalled = true;
                }

                postSave() {
                    postSaveCalled = true;
                }

                preDelete() {
                    preDeleteCalled = true;
                }

                postDelete() {
                    postDeleteCalled = true;
                }
            }

            var person = Person.create();

            person.save().then(function() {
                validateId(person);

                // Pre/post save and validate should be called
                expect(preValidateCalled).to.be.equal(true);
                expect(preSaveCalled).to.be.equal(true);
                expect(postValidateCalled).to.be.equal(true);
                expect(postSaveCalled).to.be.equal(true);
                
                // Pre/post delete should not have been called yet
                expect(preDeleteCalled).to.be.equal(false);
                expect(postDeleteCalled).to.be.equal(false);

                return person.delete();
            }).then(function(numDeleted) {
                expect(numDeleted).to.be.equal(1);

                expect(preDeleteCalled).to.be.equal(true);
                expect(postDeleteCalled).to.be.equal(true);
            }).then(done, done);
        });
    });

    describe('serialize', function() {
        it('should serialize data to JSON', function(done) {
            class Person extends Document {
                constructor() {
                    super();

                    this.name = String;
                    this.age = Number;
                    this.isAlive = Boolean;
                    this.children = [String];
                    this.spouse = {
                        type: String,
                        default: null
                    };
                }

                static collectionName() {
                    return 'people';
                }
            }

            var person = Person.create({
                name: 'Scott',
                age: 28,
                isAlive: true,
                children: ['Billy', 'Timmy'],
                spouse: null
            });

            person.save().then(function() {
                validateId(person);
                expect(person.name).to.be.equal('Scott');
                expect(person.age).to.be.equal(28);
                expect(person.isAlive).to.be.equal(true);
                expect(person.children).to.have.length(2);
                expect(person.spouse).to.be.null;

                var json = person.toJSON();

                expect(json.name).to.be.equal('Scott');
                expect(json.age).to.be.equal(28);
                expect(json.isAlive).to.be.equal(true);
                expect(json.children).to.have.length(2);
                expect(json.spouse).to.be.null;
                expect(json._id).to.be.equal(person._id.toString());
            }).then(done, done);
        });

        it('should serialize data to JSON', function(done) {
            class Person extends Document {
                constructor() {
                    super();

                    this.name = String;
                    this.children = [Person];
                    this.spouse = {
                        type: Person,
                        default: null
                    };
                }

                static collectionName() {
                    return 'people';
                }
            }

            var person = Person.create({
                name: 'Scott'
            });

            var spouse = Person.create({
                name: 'Jane'
            });

            var kid1 = Person.create({
                name: 'Billy'
            });

            var kid2 = Person.create({
                name: 'Timmy'
            });

            spouse.save().then(function() {
                return kid1.save();
            }).then(function() {
                return kid2.save();
            }).then(function() {
                person.spouse = spouse;
                person.children.push(kid1);
                person.children.push(kid2);

                return person.save();
            }).then(function() {
                validateId(person);
                validateId(spouse);
                validateId(kid1);
                validateId(kid2);

                expect(person.name).to.be.equal('Scott');
                expect(person.children).to.have.length(2);
                expect(person.spouse.name).to.be.equal('Jane');
                expect(person.children[0].name).to.be.equal('Billy');
                expect(person.children[1].name).to.be.equal('Timmy');
                expect(person.spouse).to.be.an.instanceof(Person);
                expect(person.children[0]).to.be.an.instanceof(Person);
                expect(person.children[1]).to.be.an.instanceof(Person);

                var json = person.toJSON();

                expect(json.name).to.be.equal('Scott');
                expect(json.children).to.have.length(2);
                expect(json.spouse.name).to.be.equal('Jane');
                expect(json.children[0].name).to.be.equal('Billy');
                expect(json.children[1].name).to.be.equal('Timmy');
                expect(json.spouse).to.not.be.an.instanceof(Person);
                expect(json.children[0]).to.not.be.an.instanceof(Person);
                expect(json.children[1]).to.not.be.an.instanceof(Person);
            }).then(done, done);
        });
    });
});